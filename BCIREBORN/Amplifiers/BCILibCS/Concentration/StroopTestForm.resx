<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAA
        AADixZ8A4sGXAOK9lwDiuo8A4rWPANuzggDbroAAgOb5AIbQjwCAk7UAgI+uAJ+HlwCPh58AAAAAANSq
        eADUpnAAAAAAAMWiWADUn2AA1JtYAMybWADMl1gAzJVQAMyTSADFj0gAxYw/AMWLNwDFhzcAxYsmAMWH
        LwDFhSYAxYQdAMWEFADFhQsAgKZIAK6iNwC1ly8AtY8mAL2EFAC9gAAAl6ImAI+uNwCPph0Al4A3AJeX
        AACPkwAAgJ0AAICXAACHhx0AvXiAALV7gACme4UAvXx4ALV4eACfaGAAj3g3AGjb8QBY3/EAUMHxAEjU
        +QB4zI8AcMyPAHDIgABgruoAcJPqAGib6gBwm8UAWLPxAFC1+QBQtfEAUKrxAFiu6gBYruIAUKvqAFCm
        6gBIu/EASK7qAEij6gBQssUAUK7UAEic6gBIl+oAaKq1AGimvQA/xPEAN8jxAC/d8QAvzPEAJszxAB3Q
        8QAU0vEAFMrxAAvT8QAA2/kAANf5AADV8QALyPEAC8XxAD+98QA/m+oAP5PqAD+P6gA3i+oAN4TqADeD
        4gAmn+oAL4DiACaL6gBoxXgAaMVwAGjBaABowWAAYMFYAFjBUABwtWgAYL1QAGi5SABgvUgAaLU/AGiy
        JgBoriYAeKIAAGi1FABorh0AaKoAAGilAABgqgsAYKsAAGCkAAB4nwAAcJ0AAHiLHQB4jxQAWLk/AFi5
        NwBYuS8AWLUmAFi1FABYtQsAWLIAAFB84gBIfOIASHLiAEhs4gA3eeIAN3HiAD9s4gA3aOIAL3HiAC9r
        4gAvYeIAL1ziACZY4gAvXNsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD///8AEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQ
        EBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQh4d8
        fBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEId6f398EBAQEDo6OhAQEBAQEBAQEBAQEBAQEBAQEBCH
        h4mLf398EBA6OktLOhAQEBAQEBAQEBAQEBAQEBAQCG1zhYiKi3w6OlRUVFRUOhAQEBAQEBAQEBAQEBAQ
        EAgIbG1vc4aKPDtYV1dXV1VVOhAQEBAQEBAQEBAQEBAQCDw+bGxucCJSXlxcWlpZWVk4EBAQEBAQEBAQ
        EBAQEAgIdHh7dmxyNlNdX19fX19fX1w6EBAQEBAQEBAQEBAQCH6AgH2AdzY2Tl5cW1tgX19fXwcQEBAQ
        EBAQEBAQEAEpgH19fX+DNjJPYklNY2VmaWBfORAQEBAQEBAQEBABACp9fX2AfTYxMz9DSU1RZWeRamFW
        EBAQEBAQEBAQAQEDKIJ9fX+ENjQMQ0NJTWNlZ5CTa1YQEBAQEBAQEAECAwQjLy59fzc2MkJDQ0lNY2Vn
        kJGWOhAQEBAQEBABAwUFBhEtLnmCNjIzP0NDSU1jZWeQlJZBEBAQEBAQAQIFBg4PDyQtLjA2MgpDQ0NJ
        TWNlZ5CUlo8QEBAQEBABBg4PDxIVFiUsKzYzSENDQ0lNY2VnkJSWlxAQEBAQAQYPDxIUFhYZGyY2MglD
        Q0NDSU1QZGeUlpeYEBAQEAEGDxIUFhYZGx4nHDYLP0ZKSkpQZGiRlpeXl5dAEBAQARITFhYZGh4gJycQ
        NkRETVBlaJCVl5mXl5eXl4wQEAEPFhYYGh0gJycnEBAQEFBNUGVokJWWl5eXl5eXkhAQGRYYGR0fJycn
        JxAQEBAQUE1QZWiQlZaXl5eXl5eTEBAZGRsfIScnJxAQEBAQEBAQUFBlaJCVlpeXl5eXl5MQEBkeISEn
        JxAQEBAQEBAQEBAQUGVokJWWl5eXl5eXjhAQECEhIRAQEBAQEBAQEBAQEBAQUGiQlZaXl5eXl5eXEBAQ
        EBAQEBAQEBAQEBAQEBAQEBAQkJCVlpeXl5eXl5cQEBAQEBAQEBAQEBAQEBAQEBAQEBAQkIyWl5eXl5eW
        lxAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQjIyMl5eXl5cQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEIyM
        jpeXEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQ
        EBAQEBAQEBAQEP/////////////////+H////B4///gMH//wAA//4AAH/+AAB//AAAP/wAAD/4AAA/8A
        AAP+AAAD/AAAA/gAAAPwAAAD8AAAA+AAAAPAAAABwAQAAYAPAAGAHwABgH+AAYH/wAHH/+AB///wAf//
        +AH///wD////B///////////
</value>
  </data>
</root>