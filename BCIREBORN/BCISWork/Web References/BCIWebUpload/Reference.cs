//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace BCIWork.BCIWebUpload {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BCIUploadSoap", Namespace="http://tempuri.org/")]
    public partial class BCIUpload : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckUploadFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUploadFileLengthOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFilePartOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerDescOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateAppOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BCIUpload() {
            this.Url = global::BCIWork.Properties.Settings.Default.BCIWork_BCIWebUpload_BCIUpload;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckUploadFilesCompletedEventHandler CheckUploadFilesCompleted;
        
        /// <remarks/>
        public event CheckUploadFileLengthCompletedEventHandler CheckUploadFileLengthCompleted;
        
        /// <remarks/>
        public event UploadFilePartCompletedEventHandler UploadFilePartCompleted;
        
        /// <remarks/>
        public event CheckFileCompletedEventHandler CheckFileCompleted;
        
        /// <remarks/>
        public event IsValidAccessCompletedEventHandler IsValidAccessCompleted;
        
        /// <remarks/>
        public event GetServerDescCompletedEventHandler GetServerDescCompleted;
        
        /// <remarks/>
        public event AuthenticateAppCompletedEventHandler AuthenticateAppCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUploadFiles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] CheckUploadFiles(string upl_keyword, string[] flist) {
            object[] results = this.Invoke("CheckUploadFiles", new object[] {
                        upl_keyword,
                        flist});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckUploadFilesAsync(string upl_keyword, string[] flist) {
            this.CheckUploadFilesAsync(upl_keyword, flist, null);
        }
        
        /// <remarks/>
        public void CheckUploadFilesAsync(string upl_keyword, string[] flist, object userState) {
            if ((this.CheckUploadFilesOperationCompleted == null)) {
                this.CheckUploadFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUploadFilesOperationCompleted);
            }
            this.InvokeAsync("CheckUploadFiles", new object[] {
                        upl_keyword,
                        flist}, this.CheckUploadFilesOperationCompleted, userState);
        }
        
        private void OnCheckUploadFilesOperationCompleted(object arg) {
            if ((this.CheckUploadFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUploadFilesCompleted(this, new CheckUploadFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUploadFileLength", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] CheckUploadFileLength(string upl_keyword, string[] flist, int[] slist) {
            object[] results = this.Invoke("CheckUploadFileLength", new object[] {
                        upl_keyword,
                        flist,
                        slist});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckUploadFileLengthAsync(string upl_keyword, string[] flist, int[] slist) {
            this.CheckUploadFileLengthAsync(upl_keyword, flist, slist, null);
        }
        
        /// <remarks/>
        public void CheckUploadFileLengthAsync(string upl_keyword, string[] flist, int[] slist, object userState) {
            if ((this.CheckUploadFileLengthOperationCompleted == null)) {
                this.CheckUploadFileLengthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUploadFileLengthOperationCompleted);
            }
            this.InvokeAsync("CheckUploadFileLength", new object[] {
                        upl_keyword,
                        flist,
                        slist}, this.CheckUploadFileLengthOperationCompleted, userState);
        }
        
        private void OnCheckUploadFileLengthOperationCompleted(object arg) {
            if ((this.CheckUploadFileLengthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUploadFileLengthCompleted(this, new CheckUploadFileLengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFilePart", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadFilePart(string keyword, string path, int start, int len, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buf) {
            object[] results = this.Invoke("UploadFilePart", new object[] {
                        keyword,
                        path,
                        start,
                        len,
                        buf});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFilePartAsync(string keyword, string path, int start, int len, byte[] buf) {
            this.UploadFilePartAsync(keyword, path, start, len, buf, null);
        }
        
        /// <remarks/>
        public void UploadFilePartAsync(string keyword, string path, int start, int len, byte[] buf, object userState) {
            if ((this.UploadFilePartOperationCompleted == null)) {
                this.UploadFilePartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFilePartOperationCompleted);
            }
            this.InvokeAsync("UploadFilePart", new object[] {
                        keyword,
                        path,
                        start,
                        len,
                        buf}, this.UploadFilePartOperationCompleted, userState);
        }
        
        private void OnUploadFilePartOperationCompleted(object arg) {
            if ((this.UploadFilePartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFilePartCompleted(this, new UploadFilePartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckFile(string keyword, string path, int size, long upd_time, long crt_time) {
            object[] results = this.Invoke("CheckFile", new object[] {
                        keyword,
                        path,
                        size,
                        upd_time,
                        crt_time});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFileAsync(string keyword, string path, int size, long upd_time, long crt_time) {
            this.CheckFileAsync(keyword, path, size, upd_time, crt_time, null);
        }
        
        /// <remarks/>
        public void CheckFileAsync(string keyword, string path, int size, long upd_time, long crt_time, object userState) {
            if ((this.CheckFileOperationCompleted == null)) {
                this.CheckFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFileOperationCompleted);
            }
            this.InvokeAsync("CheckFile", new object[] {
                        keyword,
                        path,
                        size,
                        upd_time,
                        crt_time}, this.CheckFileOperationCompleted, userState);
        }
        
        private void OnCheckFileOperationCompleted(object arg) {
            if ((this.CheckFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFileCompleted(this, new CheckFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsValidAccess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsValidAccess() {
            object[] results = this.Invoke("IsValidAccess", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidAccessAsync() {
            this.IsValidAccessAsync(null);
        }
        
        /// <remarks/>
        public void IsValidAccessAsync(object userState) {
            if ((this.IsValidAccessOperationCompleted == null)) {
                this.IsValidAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidAccessOperationCompleted);
            }
            this.InvokeAsync("IsValidAccess", new object[0], this.IsValidAccessOperationCompleted, userState);
        }
        
        private void OnIsValidAccessOperationCompleted(object arg) {
            if ((this.IsValidAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidAccessCompleted(this, new IsValidAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerDesc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetServerDesc() {
            object[] results = this.Invoke("GetServerDesc", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetServerDescAsync() {
            this.GetServerDescAsync(null);
        }
        
        /// <remarks/>
        public void GetServerDescAsync(object userState) {
            if ((this.GetServerDescOperationCompleted == null)) {
                this.GetServerDescOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerDescOperationCompleted);
            }
            this.InvokeAsync("GetServerDesc", new object[0], this.GetServerDescOperationCompleted, userState);
        }
        
        private void OnGetServerDescOperationCompleted(object arg) {
            if ((this.GetServerDescCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerDescCompleted(this, new GetServerDescCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthenticateApp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AuthenticateApp(long client_secret) {
            object[] results = this.Invoke("AuthenticateApp", new object[] {
                        client_secret});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateAppAsync(long client_secret) {
            this.AuthenticateAppAsync(client_secret, null);
        }
        
        /// <remarks/>
        public void AuthenticateAppAsync(long client_secret, object userState) {
            if ((this.AuthenticateAppOperationCompleted == null)) {
                this.AuthenticateAppOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateAppOperationCompleted);
            }
            this.InvokeAsync("AuthenticateApp", new object[] {
                        client_secret}, this.AuthenticateAppOperationCompleted, userState);
        }
        
        private void OnAuthenticateAppOperationCompleted(object arg) {
            if ((this.AuthenticateAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateAppCompleted(this, new AuthenticateAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void CheckUploadFilesCompletedEventHandler(object sender, CheckUploadFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUploadFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUploadFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void CheckUploadFileLengthCompletedEventHandler(object sender, CheckUploadFileLengthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUploadFileLengthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUploadFileLengthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UploadFilePartCompletedEventHandler(object sender, UploadFilePartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFilePartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFilePartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void CheckFileCompletedEventHandler(object sender, CheckFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void IsValidAccessCompletedEventHandler(object sender, IsValidAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetServerDescCompletedEventHandler(object sender, GetServerDescCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerDescCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerDescCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AuthenticateAppCompletedEventHandler(object sender, AuthenticateAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591